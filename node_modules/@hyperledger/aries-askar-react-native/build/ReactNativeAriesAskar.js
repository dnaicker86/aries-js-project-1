"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReactNativeAriesAskar = void 0;
const aries_askar_shared_1 = require("@hyperledger/aries-askar-shared");
const serialize_1 = require("./serialize");
class ReactNativeAriesAskar {
    constructor(bindings) {
        this.promisify = (method) => {
            return new Promise((resolve, reject) => {
                const _cb = ({ errorCode }) => {
                    if (errorCode !== 0) {
                        reject(new aries_askar_shared_1.AriesAskarError(JSON.parse(this.getCurrentError())));
                    }
                    else {
                        resolve();
                    }
                };
                method(_cb);
            });
        };
        this.promisifyWithResponse = (method) => {
            return new Promise((resolve, reject) => {
                const _cb = ({ errorCode, value }) => {
                    if (errorCode !== 0) {
                        reject(new aries_askar_shared_1.AriesAskarError(JSON.parse(this.getCurrentError())));
                    }
                    else {
                        if (value === undefined) {
                            reject(aries_askar_shared_1.AriesAskarError.customError({ message: 'error code was 0 but no value found. This should not occur.' }));
                        }
                        else {
                            resolve(value);
                        }
                    }
                };
                method(_cb);
            });
        };
        this.ariesAskar = bindings;
    }
    handleError({ errorCode, value }) {
        if (errorCode !== 0) {
            throw new aries_askar_shared_1.AriesAskarError(JSON.parse(this.getCurrentError()));
        }
        return value;
    }
    version() {
        return (0, aries_askar_shared_1.handleInvalidNullResponse)(this.ariesAskar.version({}));
    }
    getCurrentError() {
        return (0, aries_askar_shared_1.handleInvalidNullResponse)(this.ariesAskar.getCurrentError({}));
    }
    clearCustomLogger() {
        throw new Error('Method not implemented. clearCustomLogger');
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    setCustomLogger(_) {
        throw new Error('Method not implemented. setCustomLogger');
    }
    setDefaultLogger() {
        this.ariesAskar.setDefaultLogger({});
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    setMaxLogLevel(_) {
        throw new Error('Method not implemented. setMaxLogLevel');
    }
    entryListCount(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        return (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.entryListCount(serializedOptions)));
    }
    entryListFree(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        // null resopnse is expected as we're freeing the object
        this.handleError(this.ariesAskar.entryListFree(serializedOptions));
    }
    entryListGetCategory(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        return (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.entryListGetCategory(serializedOptions)));
    }
    entryListGetName(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        return (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.entryListGetName(serializedOptions)));
    }
    entryListGetTags(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        return this.handleError(this.ariesAskar.entryListGetTags(serializedOptions));
    }
    entryListGetValue(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const buf = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.entryListGetValue(serializedOptions)));
        return new Uint8Array(buf);
    }
    keyAeadDecrypt(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const buf = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyAeadDecrypt(serializedOptions)));
        return new Uint8Array(buf);
    }
    keyAeadEncrypt(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const ret = this.handleError(this.ariesAskar.keyAeadEncrypt(serializedOptions));
        const { buffer, noncePos, tagPos } = (0, aries_askar_shared_1.handleInvalidNullResponse)(ret);
        return new aries_askar_shared_1.EncryptedBuffer({ tagPos, noncePos, buffer: new Uint8Array(buffer) });
    }
    keyAeadGetPadding(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        return (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyAeadGetPadding(serializedOptions)));
    }
    keyAeadGetParams(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const ret = this.handleError(this.ariesAskar.keyAeadGetParams(serializedOptions));
        const { tagLength, nonceLength } = (0, aries_askar_shared_1.handleInvalidNullResponse)(ret);
        return new aries_askar_shared_1.AeadParams({ nonceLength, tagLength });
    }
    keyAeadRandomNonce(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const buf = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyAeadRandomNonce(serializedOptions)));
        return new Uint8Array(buf);
    }
    keyConvert(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const handle = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyConvert(serializedOptions)));
        return new aries_askar_shared_1.LocalKeyHandle(handle);
    }
    keyCryptoBox(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const buf = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyCryptoBox(serializedOptions)));
        return new Uint8Array(buf);
    }
    keyCryptoBoxOpen(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const buf = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyCryptoBoxOpen(serializedOptions)));
        return new Uint8Array(buf);
    }
    keyCryptoBoxRandomNonce() {
        const buf = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyCryptoBoxRandomNonce({})));
        return new Uint8Array(buf);
    }
    keyCryptoBoxSeal(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const buf = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyCryptoBoxSeal(serializedOptions)));
        return new Uint8Array(buf);
    }
    keyCryptoBoxSealOpen(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const buf = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyCryptoBoxSealOpen(serializedOptions)));
        return new Uint8Array(buf);
    }
    keyDeriveEcdh1pu(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const handle = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyDeriveEcdh1pu(serializedOptions)));
        return new aries_askar_shared_1.LocalKeyHandle(handle);
    }
    keyDeriveEcdhEs(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const handle = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyDeriveEcdhEs(serializedOptions)));
        return new aries_askar_shared_1.LocalKeyHandle(handle);
    }
    keyEntryListCount(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        return (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyEntryListCount(serializedOptions)));
    }
    keyEntryListFree(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        // null resopnse is expected as we're freeing the object
        this.handleError(this.ariesAskar.keyEntryListFree(serializedOptions));
    }
    keyEntryListGetAlgorithm(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        return (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyEntryListGetAlgorithm(serializedOptions)));
    }
    keyEntryListGetMetadata(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        return this.handleError(this.ariesAskar.keyEntryListGetMetadata(serializedOptions));
    }
    keyEntryListGetName(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        return (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyEntryListGetName(serializedOptions)));
    }
    keyEntryListGetTags(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        return this.handleError(this.ariesAskar.keyEntryListGetTags(serializedOptions));
    }
    keyEntryListLoadLocal(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const handle = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyEntryListLoadLocal(serializedOptions)));
        return new aries_askar_shared_1.LocalKeyHandle(handle);
    }
    keyFree(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        // null resopnse is expected as we're freeing the object
        this.handleError(this.ariesAskar.keyFree(serializedOptions));
    }
    keyFromJwk(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const handle = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyFromJwk(serializedOptions)));
        return new aries_askar_shared_1.LocalKeyHandle(handle);
    }
    keyFromKeyExchange(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const handle = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyFromKeyExchange(serializedOptions)));
        return new aries_askar_shared_1.LocalKeyHandle(handle);
    }
    keyFromPublicBytes(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const handle = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyFromPublicBytes(serializedOptions)));
        return new aries_askar_shared_1.LocalKeyHandle(handle);
    }
    keyFromSecretBytes(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const handle = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyFromSecretBytes(serializedOptions)));
        return new aries_askar_shared_1.LocalKeyHandle(handle);
    }
    keyFromSeed(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const handle = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyFromSeed(serializedOptions)));
        return new aries_askar_shared_1.LocalKeyHandle(handle);
    }
    keyGenerate(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const handle = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyGenerate(serializedOptions)));
        return new aries_askar_shared_1.LocalKeyHandle((0, aries_askar_shared_1.handleInvalidNullResponse)(handle));
    }
    keyGetAlgorithm(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        return (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyGetAlgorithm(serializedOptions)));
    }
    keyGetEphemeral(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        return (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyGetEphemeral(serializedOptions)));
    }
    keyGetJwkPublic(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        return (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyGetJwkPublic(serializedOptions)));
    }
    keyGetJwkSecret(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const buf = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyGetJwkSecret(serializedOptions)));
        return new Uint8Array(buf);
    }
    keyGetJwkThumbprint(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        return (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyGetJwkThumbprint(serializedOptions)));
    }
    keyGetPublicBytes(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const buf = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyGetPublicBytes(serializedOptions)));
        return new Uint8Array(buf);
    }
    keyGetSecretBytes(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const buf = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyGetSecretBytes(serializedOptions)));
        return new Uint8Array(buf);
    }
    keySignMessage(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const buf = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keySignMessage(serializedOptions)));
        return new Uint8Array(buf);
    }
    keyUnwrapKey(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const handle = (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.keyUnwrapKey(serializedOptions)));
        return new aries_askar_shared_1.LocalKeyHandle(handle);
    }
    keyVerifySignature(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const result = this.handleError(this.ariesAskar.keyVerifySignature(serializedOptions));
        return !!result;
    }
    keyWrapKey(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const ret = this.handleError(this.ariesAskar.keyWrapKey(serializedOptions));
        const { buffer, noncePos, tagPos } = (0, aries_askar_shared_1.handleInvalidNullResponse)(ret);
        return new aries_askar_shared_1.EncryptedBuffer({ tagPos, noncePos, buffer: new Uint8Array(buffer) });
    }
    scanFree(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        // null resopnse is expected as we're freeing the object
        this.handleError(this.ariesAskar.scanFree(serializedOptions));
    }
    async scanNext(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const handle = await this.promisifyWithResponse((cb) => this.handleError(this.ariesAskar.scanNext(Object.assign({ cb }, serializedOptions))));
        return aries_askar_shared_1.EntryListHandle.fromHandle(handle);
    }
    async scanStart(options) {
        const { category, storeHandle, limit, offset, profile, tagFilter } = (0, serialize_1.serializeArguments)(options);
        const handle = await this.promisifyWithResponse((cb) => this.handleError(this.ariesAskar.scanStart({
            cb,
            category,
            storeHandle,
            offset: offset || 0,
            limit: limit || -1,
            profile,
            tagFilter,
        })));
        return aries_askar_shared_1.ScanHandle.fromHandle(handle);
    }
    sessionClose(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        return this.promisify((cb) => this.handleError(this.ariesAskar.sessionClose(Object.assign({ cb }, serializedOptions))));
    }
    async sessionCount(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const response = await this.promisifyWithResponse((cb) => this.handleError(this.ariesAskar.sessionCount(Object.assign({ cb }, serializedOptions))));
        return (0, aries_askar_shared_1.handleInvalidNullResponse)(response);
    }
    async sessionFetch(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const handle = await this.promisifyWithResponse((cb) => this.handleError(this.ariesAskar.sessionFetch(Object.assign({ cb }, serializedOptions))));
        return aries_askar_shared_1.EntryListHandle.fromHandle(handle);
    }
    async sessionFetchAll(options) {
        const { category, sessionHandle, forUpdate, limit, tagFilter } = (0, serialize_1.serializeArguments)(options);
        const handle = await this.promisifyWithResponse((cb) => this.handleError(this.ariesAskar.sessionFetchAll({ cb, category, sessionHandle, forUpdate, limit: limit || -1, tagFilter })));
        return aries_askar_shared_1.EntryListHandle.fromHandle(handle);
    }
    async sessionFetchAllKeys(options) {
        const { sessionHandle, algorithm, forUpdate, limit, thumbprint, tagFilter } = (0, serialize_1.serializeArguments)(options);
        const handle = await this.promisifyWithResponse((cb) => this.handleError(this.ariesAskar.sessionFetchAllKeys({
            cb,
            sessionHandle,
            algorithm,
            forUpdate: forUpdate || -1,
            limit: limit || -1,
            thumbprint,
            tagFilter,
        })));
        return aries_askar_shared_1.KeyEntryListHandle.fromHandle(handle);
    }
    async sessionFetchKey(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const handle = await this.promisifyWithResponse((cb) => this.handleError(this.ariesAskar.sessionFetchKey(Object.assign({ cb }, serializedOptions))));
        return aries_askar_shared_1.KeyEntryListHandle.fromHandle(handle);
    }
    sessionInsertKey(options) {
        const { sessionHandle, name, localKeyHandle, expiryMs, metadata, tags } = (0, serialize_1.serializeArguments)(options);
        return this.promisify((cb) => this.handleError(this.ariesAskar.sessionInsertKey({
            cb,
            sessionHandle,
            name,
            localKeyHandle,
            expiryMs: expiryMs || -1,
            metadata,
            tags,
        })));
    }
    async sessionRemoveAll(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const response = await this.promisifyWithResponse((cb) => this.handleError(this.ariesAskar.sessionRemoveAll(Object.assign({ cb }, serializedOptions))));
        return (0, aries_askar_shared_1.handleInvalidNullResponse)(response);
    }
    sessionRemoveKey(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        return this.promisify((cb) => this.handleError(this.ariesAskar.sessionRemoveKey(Object.assign({ cb }, serializedOptions))));
    }
    async sessionStart(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const handle = await this.promisifyWithResponse((cb) => this.handleError(this.ariesAskar.sessionStart(Object.assign({ cb }, serializedOptions))));
        return aries_askar_shared_1.SessionHandle.fromHandle(handle);
    }
    sessionUpdate(options) {
        const { category, name, operation, sessionHandle, expiryMs, tags, value } = (0, serialize_1.serializeArguments)(options);
        return this.promisify((cb) => this.handleError(this.ariesAskar.sessionUpdate({
            cb,
            category,
            name,
            operation,
            sessionHandle,
            expiryMs: expiryMs || -1,
            tags,
            value,
        })));
    }
    sessionUpdateKey(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        return this.promisify((cb) => this.handleError(this.ariesAskar.sessionUpdateKey(Object.assign({ cb }, serializedOptions))));
    }
    storeClose(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        return this.promisify((cb) => this.handleError(this.ariesAskar.storeClose(Object.assign({ cb }, serializedOptions))));
    }
    async storeCreateProfile(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const response = await this.promisifyWithResponse((cb) => this.handleError(this.ariesAskar.storeCreateProfile(Object.assign({ cb }, serializedOptions))));
        return (0, aries_askar_shared_1.handleInvalidNullResponse)(response);
    }
    storeGenerateRawKey(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        return (0, aries_askar_shared_1.handleInvalidNullResponse)(this.handleError(this.ariesAskar.storeGenerateRawKey(serializedOptions)));
    }
    async storeGetProfileName(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const response = await this.promisifyWithResponse((cb) => this.handleError(this.ariesAskar.storeGetProfileName(Object.assign({ cb }, serializedOptions))));
        return (0, aries_askar_shared_1.handleInvalidNullResponse)(response);
    }
    async storeOpen(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const handle = await this.promisifyWithResponse((cb) => this.handleError(this.ariesAskar.storeOpen(Object.assign({ cb }, serializedOptions))));
        return aries_askar_shared_1.StoreHandle.fromHandle(handle);
    }
    async storeProvision(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const handle = await this.promisifyWithResponse((cb) => this.handleError(this.ariesAskar.storeProvision(Object.assign({ cb }, serializedOptions))));
        return aries_askar_shared_1.StoreHandle.fromHandle(handle);
    }
    storeRekey(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        return this.promisify((cb) => this.handleError(this.ariesAskar.storeRekey(Object.assign({ cb }, serializedOptions))));
    }
    async storeRemove(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const response = await this.promisifyWithResponse((cb) => this.handleError(this.ariesAskar.storeRemove(Object.assign({ cb }, serializedOptions))));
        return (0, aries_askar_shared_1.handleInvalidNullResponse)(response);
    }
    async storeRemoveProfile(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        const response = await this.promisifyWithResponse((cb) => this.handleError(this.ariesAskar.storeRemoveProfile(Object.assign({ cb }, serializedOptions))));
        return (0, aries_askar_shared_1.handleInvalidNullResponse)(response);
    }
    async migrateIndySdk(options) {
        const serializedOptions = (0, serialize_1.serializeArguments)(options);
        return this.promisify((cb) => this.handleError(this.ariesAskar.migrateIndySdk(Object.assign({ cb }, serializedOptions))));
    }
}
exports.ReactNativeAriesAskar = ReactNativeAriesAskar;
//# sourceMappingURL=ReactNativeAriesAskar.js.map