import { ArcHandle, Jwk, ScanHandle, SessionHandle, StoreHandle, Key } from '@hyperledger/aries-askar-shared';
export declare type ReturnObject<T = unknown> = {
    errorCode: number;
    value?: null | T;
};
export declare type Callback = (o: ReturnObject<never>) => void;
export declare type CallbackWithResponse<T = unknown> = (o: ReturnObject<T>) => void;
declare type Argument = Record<string, unknown> | Array<unknown> | Date | Uint8Array | SerializedArgument | boolean | StoreHandle | SessionHandle | ScanHandle | ArcHandle | Key | Jwk;
declare type SerializedArgument = string | number | Callback | CallbackWithResponse | ArrayBuffer;
export declare type SerializedOptions<Type> = {
    [Property in keyof Type]: Type[Property] extends string ? string : Type[Property] extends number ? number : Type[Property] extends Record<string, unknown> ? string : Type[Property] extends Array<unknown> ? string : Type[Property] extends Array<unknown> | undefined ? string : Type[Property] extends Record<string, unknown> | undefined ? string | undefined : Type[Property] extends Date ? number : Type[Property] extends Date | undefined ? number | undefined : Type[Property] extends string | undefined ? undefined | string : Type[Property] extends number | undefined ? undefined | number : Type[Property] extends Callback ? Callback : Type[Property] extends CallbackWithResponse ? CallbackWithResponse : Type[Property] extends Uint8Array ? ArrayBuffer : Type[Property] extends Uint8Array | undefined ? ArrayBuffer : Type[Property] extends StoreHandle ? number : Type[Property] extends SessionHandle ? number : Type[Property] extends ScanHandle ? number : Type[Property] extends ArcHandle ? string : Type[Property] extends Jwk ? string : unknown;
};
declare const serializeArguments: <T extends Record<string, Argument> = Record<string, Argument>>(args: T) => SerializedOptions<T>;
export { serializeArguments };
